import java.util.*;

/* This example demonstrates a simple usage of multithreading for 
data parallelism. The problem involves sorting each row of a table, 
which, without multithreading, can be done using a loop. However, 
that is inefficient as the loop will sort one row at a time. Using 
multithreading we can do sorting of all rows simultaneously. In a 
multicore (or, multiprocessor) system, each of these sorting tasks 
can happen simultaneously on multiple cores, thereby increasing the 
efficiency in completing the task. In this example, we will use a 
thread array to accomplish the sorting tasks. */

// Note, we need to use the join() method appropriately, so that the 
// main() does not finish before all threads complete their sorting.
// Also, observe the thread execution ordering in the sample output.

public class ThreadArrayDemo1{

   static final int ROW = 10; //use a number >= 10 (this determines the size of thread array) 
   static final int COLUMN = 101; //use a number > 100 (determines task length)  
   
   //a table generator method
   static int[][] table_gen(){
      int[][] temptab = new int[ROW][COLUMN];
      Random rand = new Random();
      for(int i=0;i<ROW; i++){
         for(int j=0;j<COLUMN; j++){
            temptab[i][j] = rand.nextInt(1000); 
            //loading the table with random numbers less than 1000
         }
      }
      return temptab;
   }
   
   //displays (prints) the table
   public static void printTable(int[][] tab){  
      for(int x=0; x<tab.length; x++){
      System.out.print("Row-"+ x + ":");
         for(int y=0; y<tab[x].length; y++)
            System.out.print(tab[x][y] + " ");
      System.out.println();
      }    
    }  
   
   //generates and populates the table whose rows will be sorted
   
   static int[][] table = table_gen(); 

   public static void main(String[] args){
      
      System.out.println("\nThis is: " + Thread.currentThread().getName()); 
      //The Thread.currentThread().getName() indicates the thread identity
      
	  // print table before sorting  
	  System.out.println("\nTable before sorting..\n");
	  printTable(table);
     
     //creating thread array for soting each row of the table
     //the size of the thread array depends on number of rows 
     Thread[] th_arr = new Thread[table.length];
     
     for(int i=0; i<table.length; i++){
         //initializing the thread object to work on the specific row
         th_arr[i] = new Thread(new sorters(i));
     }
     
     /* We could have used th_arr[i].start() in the previous loop. 
     However, creating the thread objects and start their execution 
     in the same loop would icreases the chance of the threads working 
     in sequence. That is, the execution order "loses" the parallel 
     structure. Seprating these two aspects increases the chance of 
     random order execution of the threads. Nonetheless, the actual 
     ordering is still the JVM's discretion. Thus, in a single-processor 
     system it is difficult to achieve the true benfit of multithreading. */
     
     try{
         for(int i=0; i<th_arr.length;i++)   
            th_arr[i].start(); //starting execution of the threads
            
     }catch(Exception e){ System.out.print(e); }
      
     //pause main until all threads have finished
     try{
         for (int i =0;i<th_arr.length;i++){
            th_arr[i].join(); //main() thread is joining on all these threads
         }
     }
     catch(Exception e){ System.out.print(e); }
     
     //main thread resumes after all threads are done and prints the sorted table
	  System.out.println("\nTable after sorting..\n");
     printTable(table);
  }  
    
   // all the threads are instances of this 'sorters' class; each instance is 
   // actually one thread that will sort the specific row, as indicated by r. 
   // All these threads are working simultaneously, independent of the sorting
   // status of the other. Thus we achieve data parallelism using multithreading
   
   static class sorters implements Runnable{
      int row;
   
      public sorters(int r){
         row = r;
      }
   
      public void run(){
         System.out.println("\nThis is: " + Thread.currentThread().getName());
         Arrays.sort(table[row]);
      }
   }

}

/*================ A sample output ================

 ----jGRASP exec: java ThreadArrayDemo
 
 This is: main
 
 Table before sorting..
 
 Row-0:180 224 952 235 748 535 362 25 169 313 223 792 406 783 811 794 864 641 172 397 480 720 983 349 430 914 509 342 31 251 573 987 415 373 492 412 721 284 279 816 978 505 449 695 102 32 264 377 843 560 761 369 562 694 660 328 244 510 530 735 160 800 426 997 746 883 156 848 120 880 173 116 38 670 385 869 641 381 262 107 832 513 940 161 311 965 515 834 742 993 846 809 158 530 851 394 619 261 748 635 
 Row-1:420 560 311 553 231 364 449 400 306 314 522 586 93 281 154 915 139 282 834 591 744 920 412 601 436 887 564 553 148 312 624 328 138 230 131 283 491 800 407 530 646 563 240 196 213 731 182 657 275 55 539 283 622 142 43 818 190 569 672 563 435 255 893 804 141 407 795 142 588 277 15 223 344 92 812 620 803 4 629 696 907 544 67 339 916 240 196 825 249 518 325 453 747 494 126 946 914 743 947 695 
 Row-2:792 248 636 501 853 785 554 790 981 791 313 475 318 715 917 225 950 624 357 426 945 216 309 308 583 450 351 824 948 377 57 297 193 36 74 302 905 925 653 406 990 889 912 183 529 123 839 379 808 901 761 328 17 348 332 2 429 110 149 655 736 755 63 983 437 469 837 590 79 30 643 928 17 549 909 344 447 772 635 460 790 896 77 928 190 366 328 901 792 407 211 846 18 96 451 615 823 56 377 819 
 Row-3:843 62 566 680 380 399 93 641 893 353 774 888 804 63 307 198 3 354 179 296 172 72 877 399 557 387 734 789 922 721 723 559 762 59 330 299 562 868 419 135 598 512 212 595 126 494 241 653 389 972 195 623 500 853 79 103 5 146 79 763 756 898 182 566 471 375 389 364 791 879 603 414 431 379 849 874 632 952 122 890 855 823 650 479 494 323 502 42 407 119 569 806 536 913 567 126 63 159 545 247 
 Row-4:583 236 193 729 539 839 720 735 679 873 219 32 990 665 948 242 901 229 317 227 87 631 607 851 970 754 728 881 110 687 163 88 246 152 834 125 775 473 526 608 229 270 615 509 533 148 687 966 365 256 616 262 8 814 734 917 189 440 543 779 223 867 599 931 520 295 24 846 38 115 727 952 983 530 898 923 457 886 37 518 354 919 532 17 558 480 514 200 831 255 927 377 959 775 753 396 121 332 650 791 
 Row-5:141 210 735 211 218 601 16 830 445 753 443 933 72 927 107 550 414 529 430 168 387 444 229 143 425 191 492 104 773 867 297 493 703 17 25 93 216 312 790 147 622 978 821 26 363 915 635 122 700 237 672 137 821 730 428 417 66 927 661 97 144 888 587 843 569 318 291 610 6 3 887 702 608 6 534 14 191 351 672 976 987 360 514 503 345 229 472 722 93 858 608 501 918 776 755 159 735 324 215 727 
 Row-6:801 420 47 587 542 199 524 838 408 576 404 741 608 837 537 935 811 778 477 255 967 822 241 991 715 583 77 771 428 31 938 655 387 338 587 949 660 266 153 311 98 545 941 717 734 426 497 740 319 5 304 739 171 13 548 443 371 352 422 251 124 242 847 941 466 430 389 417 23 986 914 707 857 766 119 779 770 225 789 490 89 112 756 684 702 508 516 398 82 119 825 556 828 459 652 191 104 230 419 890 
 Row-7:203 789 851 272 114 940 764 948 343 544 699 469 549 409 341 3 947 48 998 698 132 656 898 58 584 364 539 944 619 285 297 502 67 798 487 329 567 142 946 964 426 657 53 377 927 308 175 823 111 107 974 5 781 545 261 609 955 66 209 709 38 688 817 478 931 81 476 67 725 9 860 543 999 385 368 802 227 548 279 978 917 714 632 313 274 579 159 252 386 825 290 392 284 682 57 161 457 201 860 56 
 Row-8:560 816 406 992 81 788 823 61 189 765 128 417 674 17 919 572 637 620 451 616 64 165 553 887 539 120 660 289 798 379 836 501 965 504 221 435 588 622 360 100 505 524 302 119 266 428 321 897 859 479 973 192 298 786 419 868 894 645 247 851 25 124 591 279 270 412 228 62 573 859 493 421 556 636 814 210 448 94 328 13 489 617 906 649 819 380 597 469 144 837 693 74 27 894 403 761 160 144 999 907 
 Row-9:752 263 435 947 640 58 515 475 720 21 800 978 905 213 524 143 656 7 8 741 159 733 842 995 235 942 994 967 928 553 338 494 472 550 510 842 362 313 665 713 967 36 839 510 904 343 425 902 580 855 523 937 382 600 610 42 394 704 505 853 136 442 82 69 913 28 57 55 527 549 580 790 505 406 951 811 419 604 949 809 180 263 65 467 41 91 521 491 103 848 428 279 93 856 954 793 24 340 338 860 
 
 This is: Thread-0
 
 This is: Thread-1
 
 This is: Thread-9
 
 This is: Thread-8
 
 This is: Thread-7
 
 This is: Thread-6
 
 This is: Thread-5
 
 This is: Thread-4
 
 This is: Thread-3
 
 This is: Thread-2
 
 Table after sorting..
 
 Row-0:25 31 32 38 102 107 116 120 156 158 160 161 169 172 173 180 223 224 235 244 251 261 262 264 279 284 311 313 328 342 349 362 369 373 377 381 385 394 397 406 412 415 426 430 449 480 492 505 509 510 513 515 530 530 535 560 562 573 619 635 641 641 660 670 694 695 720 721 735 742 746 748 748 761 783 792 794 800 809 811 816 832 834 843 846 848 851 864 869 880 883 914 940 952 965 978 983 987 993 997 
 Row-1:4 15 43 55 67 92 93 126 131 138 139 141 142 142 148 154 182 190 196 196 213 223 230 231 240 240 249 255 275 277 281 282 283 283 306 311 312 314 325 328 339 344 364 400 407 407 412 420 435 436 449 453 491 494 518 522 530 539 544 553 553 560 563 563 564 569 586 588 591 601 620 622 624 629 646 657 672 695 696 731 743 744 747 795 800 803 804 812 818 825 834 887 893 907 914 915 916 920 946 947 
 Row-2:2 17 17 18 30 36 56 57 63 74 77 79 96 110 123 149 183 190 193 211 216 225 248 297 302 308 309 313 318 328 328 332 344 348 351 357 366 377 377 379 406 407 426 429 437 447 450 451 460 469 475 501 529 549 554 583 590 615 624 635 636 643 653 655 715 736 755 761 772 785 790 790 791 792 792 808 819 823 824 837 839 846 853 889 896 901 901 905 909 912 917 925 928 928 945 948 950 981 983 990 
 Row-3:3 5 42 59 62 63 63 72 79 79 93 103 119 122 126 126 135 146 159 172 179 182 195 198 212 241 247 296 299 307 323 330 353 354 364 375 379 380 387 389 389 399 399 407 414 419 431 471 479 494 494 500 502 512 536 545 557 559 562 566 566 567 569 595 598 603 623 632 641 650 653 680 721 723 734 756 762 763 774 789 791 804 806 823 843 849 853 855 868 874 877 879 888 890 893 898 913 922 952 972 
 Row-4:8 17 24 32 37 38 87 88 110 115 121 125 148 152 163 189 193 200 219 223 227 229 229 236 242 246 255 256 262 270 295 317 332 354 365 377 396 440 457 473 480 509 514 518 520 526 530 532 533 539 543 558 583 599 607 608 615 616 631 650 665 679 687 687 720 727 728 729 734 735 753 754 775 775 779 791 814 831 834 839 846 851 867 873 881 886 898 901 917 919 923 927 931 948 952 959 966 970 983 990 
 Row-5:3 6 6 14 16 17 25 26 66 72 93 93 97 104 107 122 137 141 143 144 147 159 168 191 191 210 211 215 216 218 229 229 237 291 297 312 318 324 345 351 360 363 387 414 417 425 428 430 443 444 445 472 492 493 501 503 514 529 534 550 569 587 601 608 608 610 622 635 661 672 672 700 702 703 722 727 730 735 735 753 755 773 776 790 821 821 830 843 858 867 887 888 915 918 927 927 933 976 978 987 
 Row-6:5 13 23 31 47 77 82 89 98 104 112 119 119 124 153 171 191 199 225 230 241 242 251 255 266 304 311 319 338 352 371 387 389 398 404 408 417 419 420 422 426 428 430 443 459 466 477 490 497 508 516 524 537 542 545 548 556 576 583 587 587 608 652 655 660 684 702 707 715 717 734 739 740 741 756 766 770 771 778 779 789 801 811 822 825 828 837 838 847 857 890 914 935 938 941 941 949 967 986 991 
 Row-7:3 5 9 38 48 53 56 57 58 66 67 67 81 107 111 114 132 142 159 161 175 201 203 209 227 252 261 272 274 279 284 285 290 297 308 313 329 341 343 364 368 377 385 386 392 409 426 457 469 476 478 487 502 539 543 544 545 548 549 567 579 584 609 619 632 656 657 682 688 698 699 709 714 725 764 781 789 798 802 817 823 825 851 860 860 898 917 927 931 940 944 946 947 948 955 964 974 978 998 999 
 Row-8:13 17 25 27 61 62 64 74 81 94 100 119 120 124 128 144 144 160 165 189 192 210 221 228 247 266 270 279 289 298 302 321 328 360 379 380 403 406 412 417 419 421 428 435 448 451 469 479 489 493 501 504 505 524 539 553 556 560 572 573 588 591 597 616 617 620 622 636 637 645 649 660 674 693 761 765 786 788 798 814 816 819 823 836 837 851 859 859 868 887 894 894 897 906 907 919 965 973 992 999 
 Row-9:7 8 21 24 28 36 41 42 55 57 58 65 69 82 91 93 103 136 143 159 180 213 235 263 263 279 313 338 338 340 343 362 382 394 406 419 425 428 435 442 467 472 475 491 494 505 505 510 510 515 521 523 524 527 549 550 553 580 580 600 604 610 640 656 665 704 713 720 733 741 752 790 793 800 809 811 839 842 842 848 853 855 856 860 902 904 905 913 928 937 942 947 949 951 954 967 967 978 994 995 
 
  ----jGRASP: operation complete.


================================================= */